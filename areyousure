--// Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local player = game.Players.LocalPlayer

--// UI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "TeleportUI"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 120)
frame.Position = UDim2.new(0.5, -150, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.BorderSizePixel = 0
frame.BackgroundTransparency = 0.05
frame.Parent = gui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -30, 0, 30)
title.Position = UDim2.new(0, 10, 0, 5)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamBold
title.Text = "Building Boats Gold Farm"
title.TextSize = 20
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = frame

local desc = Instance.new("TextLabel")
desc.Size = UDim2.new(1, -20, 0, 40)
desc.Position = UDim2.new(0, 10, 0, 40)
desc.BackgroundTransparency = 1
desc.Font = Enum.Font.Gotham
desc.Text = "Toggle teleport sequence with platforms."
desc.TextWrapped = true
desc.TextSize = 14
desc.TextColor3 = Color3.fromRGB(200, 200, 200)
desc.TextXAlignment = Enum.TextXAlignment.Left
desc.Parent = frame

local button = Instance.new("TextButton")
button.Size = UDim2.new(0.9, 0, 0.25, 0)
button.Position = UDim2.new(0.5, 0, 1, -40)
button.AnchorPoint = Vector2.new(0.5, 0)
button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
button.Font = Enum.Font.GothamBold
button.Text = "Start Gold Farm"
button.TextSize = 16
button.TextScaled = false
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.AutoButtonColor = false
button.ClipsDescendants = true
button.Parent = frame
Instance.new("UICorner", button).CornerRadius = UDim.new(0, 8)

local barContainer = Instance.new("Frame")
barContainer.Size = UDim2.new(1, 0, 0, 3)
barContainer.Position = UDim2.new(0, 0, 1, -3)
barContainer.BackgroundTransparency = 1
barContainer.Parent = frame

local bar = Instance.new("Frame")
bar.Size = UDim2.new(0, 0, 1, 0)
bar.Position = UDim2.new(0, 0, 0, 0)
bar.BackgroundColor3 = Color3.fromRGB(0, 200, 80)
bar.BorderSizePixel = 0
bar.Parent = barContainer
Instance.new("UICorner", bar).CornerRadius = UDim.new(1, 0)

local teleporting = false

--// Teleport positions
local positions = {
    Vector3.new(58.99, -20.96, -465.08),
    Vector3.new(57.50, -20.23, -761.23),
    Vector3.new(58.25, -20.23, -1136.79),
    Vector3.new(55.81, -20.23, -1548.85),
    Vector3.new(58.66, -20.23, -1925.04),
    Vector3.new(59.22, -20.23, -2320.42),
    Vector3.new(60.51, -20.23, -2705.64),
    Vector3.new(65.55, -40.23, -3000.64),
    Vector3.new(55.53, -914.25, -3569.47)
}

--// Cleanup helper
local function cleanupPlatforms()
    for _, part in ipairs(workspace:GetChildren()) do
        if part:IsA("Part") and part.Name == "TeleportPlatform" then
            part:Destroy()
        end
    end
end

--// Get player's root part
local function getRoot()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

--// Teleport sequence logic
local function teleportSequence()
    local rootPart = getRoot()

    for i, pos in ipairs(positions) do
        if not teleporting then break end

        rootPart.CFrame = CFrame.new(pos)

        if i < #positions then
            cleanupPlatforms()
            local platform = Instance.new("Part")
            platform.Size = Vector3.new(10, 1, 10)
            platform.Anchored = true
            platform.Position = Vector3.new(pos.X, pos.Y - 3, pos.Z)
            platform.Parent = workspace
            platform.Name = "TeleportPlatform"
        end

        bar:TweenSize(
            UDim2.new(i / #positions, 0, 1, 0),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Quad,
            0.5,
            true
        )

        task.wait(5.5)
    end

    cleanupPlatforms()

    if teleporting then
        bar:TweenSize(UDim2.new(0, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
        task.wait(5)
        teleportSequence()
    else
        button.Text = "Start Gold Farm"
        bar:TweenSize(UDim2.new(0, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
    end
end

--// Animate button click
local function animateButtonPress()
    TweenService:Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = UDim2.new(0.87, 0, 0.23, 0),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    }):Play()

    task.wait(0.1)

    TweenService:Create(button, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = UDim2.new(0.9, 0, 0.25, 0),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    }):Play()
end

--// Reset stage attributes to 0
local function resetStageAttributes()
    for i = 1, 7 do
        local stage = workspace.Stages:FindFirstChild(tostring(i))
        if stage then
            local attributes = {"MaxDurability", "MaxSize", "MinDurability", "MinSize"}
            for _, attrName in ipairs(attributes) do
                local attr = stage:FindFirstChild(attrName)
                if attr and attr:IsA("NumberValue") then
                    attr.Value = 0
                end
            end
        end
    end
end

--// Tool giver function
local function giveMissingTools()
    local toolsFolder = game:GetService("ReplicatedStorage"):WaitForChild("Tools")
    local backpack = player:WaitForChild("Backpack")

    for _, tool in ipairs(toolsFolder:GetChildren()) do
        if tool:IsA("Tool") and not backpack:FindFirstChild(tool.Name) then
            local clone = tool:Clone()
            clone.Parent = backpack
        end
    end
end

-- Initial tool giving
giveMissingTools()

-- Re-give tools on respawn
player.CharacterAdded:Connect(function()
    task.wait(0.3)
    giveMissingTools()
end)

--// Button click logic
button.MouseButton1Click:Connect(function()
    animateButtonPress()

    if teleporting then
        teleporting = false
        button.Text = "Start Gold Farm"
        cleanupPlatforms()
    else
        teleporting = true
        button.Text = "Stop Gold Farm"

        resetStageAttributes()
        task.spawn(teleportSequence)
    end
end)

--// Dragging GUI
local dragging = false
local dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(
        startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if dragging then
            update(input)
        end
    end
end)

--// Anti-AFK
player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
